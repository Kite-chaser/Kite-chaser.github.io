<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Kite-chaser.github.io</id>
    <title>Kite-chaser</title>
    <updated>2019-08-18T12:26:22.041Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Kite-chaser.github.io"/>
    <link rel="self" href="https://Kite-chaser.github.io/atom.xml"/>
    <subtitle>This is my blog.</subtitle>
    <logo>https://Kite-chaser.github.io/images/avatar.png</logo>
    <icon>https://Kite-chaser.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Kite-chaser</rights>
    <entry>
        <title type="html"><![CDATA[P3088 [USACO13NOV]挤奶牛Crowded Cows]]></title>
        <id>https://Kite-chaser.github.io/post/p3088-usaco13novji-nai-niu-crowded-cows</id>
        <link href="https://Kite-chaser.github.io/post/p3088-usaco13novji-nai-niu-crowded-cows">
        </link>
        <updated>2019-08-18T11:55:27.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="题目描述">题目描述</h4>
<p>Farmer John's N cows (1 &lt;= N &lt;= 50,000) are grazing along a one-dimensional fence. Cow i is standing at location x(i) and has height h(i) (1 &lt;= x(i),h(i) &lt;= 1,000,000,000).</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="题目描述">题目描述</h4>
<p>Farmer John's N cows (1 &lt;= N &lt;= 50,000) are grazing along a one-dimensional fence. Cow i is standing at location x(i) and has height h(i) (1 &lt;= x(i),h(i) &lt;= 1,000,000,000).</p>
<!--more-->
<p>A cow feels &quot;crowded&quot; if there is another cow at least twice her height within distance D on her left, and also another cow at least twice her height within distance D on her right (1 &lt;= D &lt;= 1,000,000,000). Since crowded cows produce less milk, Farmer John would like to count the number of such cows. Please help him.</p>
<p>FJ有N(1 &lt;= N &lt;= 50,000)头奶牛沿着一维的栅栏吃草，第i头奶牛在目标点x(i) ，它的身高是 h(i) (1 &lt;=x(i),h(i) &lt;= 1,000,000,000)。</p>
<p>当一头奶牛左边D距离内而且右边D距离内有身高至少是它的两倍的奶牛，t (1 &lt;= D &lt;= 1,000,000,000)，它就会觉得拥挤。</p>
<p>请计算觉得拥挤的奶牛的数量。</p>
<blockquote>
<p><a href="https://www.luogu.org/problem/P3088">原题链接</a></p>
</blockquote>
<h3 id="solve">Solve</h3>
<p>手动模拟一下队列就行。</p>
<p>1.一个递减的单调队列，保证队首是最近最高的“奶牛”（最高优先）</p>
<p>2.依次遍历，如果队首的比他高两倍以上，就把他标记下来；否则就不标。</p>
<p>3.从左到右，从右到左，重复两次，有两次标记的就是“Crowded Cows&quot;。</p>
<h4 id="tips">Tips：</h4>
<p>为什么如此标记呢？</p>
<p>首先，我们保证了队首是最近最高的“奶牛”。所以如果队首都没有他高，那就没有比他高的的了（最起码他前面没有了）。而第二次遍历就是解决他后面是否有比他高的“奶牛”（上文的“高”都是指高出两倍及以上）。</p>
<p>具体见代码</p>
<h3 id="code">Code</h3>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;  //标准开头
const int N=500001;
int n,m;  //n==n,m==d
int q[N][3];  //核心队列
struct note{
	int x,h,r;
}d[N];  //d存储每头“奶牛”的信息——位置（x），高度（h)，序号(r)（序号可以方便标记）
bool vis[N][3];  //标记小能手
int ans;   //答案
int head=1,tail=1;  //head——队首，tail——队尾
bool cmp(const note &amp;a,const note &amp;b){  //按位置从小到大排
	return a.x&lt;b.x;
}
int main()
{
	memset(q,0,sizeof(q));
	memset(vis,false,sizeof(vis));
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=n;i++) cin&gt;&gt;d[i].x&gt;&gt;d[i].h,d[i].r=i;
	sort(d+1,d+1+n,cmp);  //sort快排，其实也可以换成其他的方法，只要不影响结果
	q[head][0]=d[1].r;
	q[head][1]=d[1].x;
	q[head][2]=d[1].h;
	for(int i=2;i&lt;=n;i++){
		while(q[head][1]&lt;d[i].x-m&amp;&amp;head&lt;=tail) head++;  //如果队首的位置已经超出了当前“奶牛”的范围，那么队首就没有“利用价值”了，甚至会影响正常标记，所以必须删去（其实删去不是真正的删去，只是头指针后移）。
		if(q[head][2]&gt;=d[i].h*2) vis[d[i].r][1]=true;  //标记
		while(q[tail][2]&lt;d[i].h&amp;&amp;tail&gt;=head) tail--;  //队列更新
		tail++;
		q[tail][0]=d[i].r;
		q[tail][1]=d[i].x;
		q[tail][2]=d[i].h;
	}
	head=1;
	tail=1;
	memset(q,0,sizeof(q));
	q[head][0]=d[n].r;
	q[head][1]=d[n].x;
	q[head][2]=d[n].h;
	for(int i=n-1;i&gt;=1;i--){  //再来一遍
		while(q[head][1]&gt;d[i].x+m&amp;&amp;head&lt;=tail) head++;
		if(q[head][2]&gt;=d[i].h*2) vis[d[i].r][2]=true;
		while(q[tail][2]&lt;d[i].h&amp;&amp;tail&gt;=head) tail--;
		tail++;
		q[tail][0]=d[i].r;
		q[tail][1]=d[i].x;
		q[tail][2]=d[i].h;
	}
	for(int i=1;i&lt;=n;i++){  //注意是两次标记都有，才是“Crowded Cows”
		if(vis[i][1]==true&amp;&amp;vis[i][2]==true) ans++;
	}
	cout&lt;&lt;ans;  //完美输出
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P4879 ycz的妹子]]></title>
        <id>https://Kite-chaser.github.io/post/p4879-ycz-de-mei-zi</id>
        <link href="https://Kite-chaser.github.io/post/p4879-ycz-de-mei-zi">
        </link>
        <updated>2019-08-18T05:58:56.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="题目背景">题目背景</h4>
<p>ycz有很多很多的妹子（ycz：瞎说）</p>
<h4 id="题目描述">题目描述</h4>
<p>机房神犇ycz有n个青梅竹马，她们分别住在1~n号城市中。小时候的她们美丽可爱，但是由于女大十八变，有些妹子的颜值发生了变化，但是十分重感情的ycz神犇不忍心抛弃她们，于是记录下来了她们颜值变化的值，我们用C, x, y表示第x个城市的妹子的颜值下降了y。长大之后的ycz非常有魅力，有许多妹子被ycz迷得神魂颠倒，我们用I, x, y表示第x个城市有一个妹子喜欢上了ycz，她的颜值为y（y有可能是负数，但是ycz来者不拒）。但在中途有一些妹子和ycz吵架了，于是就分手了，我们用D, x表示第x个妹子和ycz分手了。</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="题目背景">题目背景</h4>
<p>ycz有很多很多的妹子（ycz：瞎说）</p>
<h4 id="题目描述">题目描述</h4>
<p>机房神犇ycz有n个青梅竹马，她们分别住在1~n号城市中。小时候的她们美丽可爱，但是由于女大十八变，有些妹子的颜值发生了变化，但是十分重感情的ycz神犇不忍心抛弃她们，于是记录下来了她们颜值变化的值，我们用C, x, y表示第x个城市的妹子的颜值下降了y。长大之后的ycz非常有魅力，有许多妹子被ycz迷得神魂颠倒，我们用I, x, y表示第x个城市有一个妹子喜欢上了ycz，她的颜值为y（y有可能是负数，但是ycz来者不拒）。但在中途有一些妹子和ycz吵架了，于是就分手了，我们用D, x表示第x个妹子和ycz分手了。</p>
<!--more-->
<p>最近神犇ycz要去全国各地找他的妹子们，为了方便计算，我们珂以把ycz的妹子所在的城市当作是一条直线，并且挨在一起。神犇ycz由于忙于和他的妹子们联系此时已经很累了，于是交给你一个这样的任务：他想知道他在某个时间去找他的所有妹子们珂以获得多大的愉悦度，这个愉悦度为他找的妹子的颜值数，你要做的就是求出这个愉悦度之和（注意长大后妹子们的颜值可能为负数/滑稽）。</p>
<p>注意：每个城市只允许有一个妹子，也就是说后来喜欢上ycz的妹子会赶走之前这个城市喜欢ycz的妹子~~（一城不容二女）~~。</p>
<p>UPD:</p>
<p>青梅竹马都是喜欢ycz的。</p>
<p>分手的第x个妹子不是第x城市的妹子，是指从前往后数第x个有妹子的城市的妹子</p>
<p>青梅竹马长大后就是妹子</p>
<p>修改的值y不为负数，但是颜值减去之后可能为负数</p>
<blockquote>
<p><a href="https://www.luogu.org/problem/P4879">原题链接</a></p>
</blockquote>
<h1 id="slove">Slove</h1>
<p>其实这就是一个需要稍加变化的线段树。</p>
<p>操作说明：</p>
<p>C 单点修改</p>
<p>I 同样是单点修改，但是需要一点变化</p>
<p>D 还是单点修改，也需要一点变化（tip:这里的x指的不是第x个城市，而是从前往后第x个，两者还是有区别的）</p>
<p>Q 区间查询，其实就是线段树里的节点一</p>
<h1 id="code">code</h1>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
using namespace std;
const int maxn=2000001;
long long n,m;
struct note{
    long long l,r,w,cnt;   //l表左端点，r表右端点，w表颜值总和，cnt表妹子数（tip:这个cnt是很重要的）
}d[maxn];
long long a[maxn];   // tip:颜值的值一定要开longlong,包括上面的w;
char c;
int x,y;
void build(int k,int s,int t){   //建树
    d[k].l=s;
    d[k].r=t;
    if(s==t){
        d[k].w=a[s];
        if(a[s]&gt;0) d[k].cnt=1;
        return ;
    }
    else{
        build(k*2,s,(s+t)/2);
        build(k*2+1,(s+t)/2+1,t);
        d[k].w=d[k*2].w+d[k*2+1].w;
        d[k].cnt=d[k*2].cnt+d[k*2+1].cnt;
    }
}
void sub(int k){   //普通的单点修改
    if(d[k].l==d[k].r){
        d[k].w-=y;
        return ;
    }
    int mid=(d[k].l+d[k].r)/2;
    if(x&lt;=mid) sub(k*2);
    else sub(k*2+1);
    d[k].w=d[k*2].w+d[k*2+1].w;
}
void revise(int k){   //还是普通的单点修改
    if(d[k].l==d[k].r){
         d[k].w=y;
         d[k].cnt=1;   //cnt=1,这样的话不管之前这个城市有没有妹子，都可以正确表示
         return ;
    }
    int mid=(d[k].l+d[k].r)/2;
    if(x&lt;=mid) revise(k*2);
    else revise(k*2+1);
    d[k].w=d[k*2].w+d[k*2+1].w;
    d[k].cnt=d[k*2].cnt+d[k*2+1].cnt;
}
void leave(int k){  //本题最难处理的部分
    if(d[k].l==d[k].r){
        d[k].w=0;
        d[k].cnt=0;
        return ;
    }
    if(x&lt;=d[k*2].cnt) leave(k*2); //如果左子树的妹子数大于x,就向左子树寻找     
    else{   //如果左子树的妹子数小于x,就向右子树寻找（tip:为什么x还要减去左子树的妹子数呢？想一想）
        x-=d[k*2].cnt；
        leave(k*2+1)；
    }
    d[k].cnt=d[k*2].cnt+d[k*2+1].cnt;
    d[k].w=d[k*2].w+d[k*2+1].w;
}
int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i];
    build(1,1,500000);
    for(int i=1;i&lt;=m;i++){
        cin&gt;&gt;c;
        if(c=='C'){
            cin&gt;&gt;x&gt;&gt;y;
            sub(1);
        }
        else if(c=='I'){
            cin&gt;&gt;x&gt;&gt;y;
            revise(1);
        }
        else if(c=='D'){
            cin&gt;&gt;x;
            leave(1);
        }
        else if(c=='Q') cout&lt;&lt;d[1].w&lt;&lt;endl；
    }
    return 0;
}
</code></pre>
<p><s>自认为简洁的代码</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[P1330 封锁阳光大学]]></title>
        <id>https://Kite-chaser.github.io/post/p1330-feng-suo-yang-guang-da-xue</id>
        <link href="https://Kite-chaser.github.io/post/p1330-feng-suo-yang-guang-da-xue">
        </link>
        <updated>2019-08-18T05:44:52.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="题目描述">题目描述</h4>
<p>曹是一只爱刷街的老曹，暑假期间，他每天都欢快地在阳光大学的校园里刷街。河蟹看到欢快的曹，感到不爽。河蟹决定封锁阳光大学，不让曹刷街。</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="题目描述">题目描述</h4>
<p>曹是一只爱刷街的老曹，暑假期间，他每天都欢快地在阳光大学的校园里刷街。河蟹看到欢快的曹，感到不爽。河蟹决定封锁阳光大学，不让曹刷街。</p>
<!-- more -->
<p>阳光大学的校园是一张由N个点构成的无向图，N个点之间由M条道路连接。每只河蟹可以对一个点进行封锁，当某个点被封锁后，与这个点相连的道路就被封锁了，曹就无法在与这些道路上刷街了。非常悲剧的一点是，河蟹是一种不和谐的生物，当两只河蟹封锁了相邻的两个点时，他们会发生冲突。</p>
<p>询问：最少需要多少只河蟹，可以封锁所有道路并且不发生冲突。</p>
<blockquote>
<p><a href="https://www.luogu.org/problem/P1330">原题链接</a></p>
</blockquote>
<h1 id="solution">Solution</h1>
<p>简单说，就是将给定的图（不一定联通）进行“染色”。因为“当两只河蟹封锁了相邻的两个点时，他们会发生冲突”，所以用两种颜色。</p>
<p>注意：给定的图不一定是联通的</p>
<p>判联通：</p>
<p>方法一：并查集，父节点相同的为一张图（<a href="https://five-shifts-forever.blog.luogu.org/bing-zha-ji">可参考蒟蒻的OI笔记</a>）</p>
<p>方法二：Floyd</p>
<p>AC代码：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
int n,m,sum1,sum2,ans;  //n为节点数，m为边数，sum1.sum2用于染色点的统计，ans为最后答案
int f[10001],vis[10001],du[10001];   //f用于并查集判联通，vis用于染色（1，2分别是两种颜色），du用于统计节点的度数
bool flag;   //flag用于判是否有解.false表有解.true无解
vector&lt;int&gt; g[10001];  //vector玄学建图
//并查集
int find(int x){
    if(x!=f[x]) f[x]=find(f[x]);
    return f[x];
}
void dfs(int x){
    if(vis[x]==1) sum1++;
    if(vis[x]==2) sum2++;  //记录色数
    if(flag==true) return ; 
    for(int i=0;i&lt;g[x].size();i++){
        if(vis[x]!=vis[g[x][i]]&amp;&amp;vis[g[x][i]]!=0) continue; //已经染好，跳过
        if(vis[x]==vis[g[x][i]]){ //与之前有冲突，无解
            flag=true;
            break;
        }
        vis[g[x][i]]=3-vis[x];
        dfs(g[x][i]);
    }
}
int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=n;i++) f[i]=i;
    for(int i=1;i&lt;=m;i++){
        int u,v;
        cin&gt;&gt;u&gt;&gt;v;
        int x=find(u);
        int y=find(v);
        if(x!=y) f[y]=x;  //并查集
        g[u].push_back(v);
        g[v].push_back(u);  //无向图，双向建边
        du[u]++;
        du[v]++;   //记录度数
    }
    for(int i=1;i&lt;=n;i++){
        sum1=0,sum2=0;  //sum1.sum2表每张图的两种色数，搜索前清零
        if(f[i]==i&amp;&amp;du[i]&gt;0){  //搜索每张独立且有边的图
            vis[i]=1;  //起点色别其实无所谓，效果都一样
            dfs(i);
            ans+=min(sum1,sum2);
        }
        if(flag==true){
            cout&lt;&lt;&quot;Impossible&quot;;
            return 0;
        }
    }
    cout&lt;&lt;ans;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并查集]]></title>
        <id>https://Kite-chaser.github.io/post/bing-cha-ji</id>
        <link href="https://Kite-chaser.github.io/post/bing-cha-ji">
        </link>
        <updated>2019-08-18T05:35:19.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="rt">RT</h1>
<p>并查集是一种树型的数据结构，用于处理一些不相交集合的合并及查询问题，常常在使用中以森林来表示（一般用数组实现）。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="rt">RT</h1>
<p>并查集是一种树型的数据结构，用于处理一些不相交集合的合并及查询问题，常常在使用中以森林来表示（一般用数组实现）。</p>
<!--more-->
<h1 id="实现核心">实现核心</h1>
<h4 id="1初始化">1.初始化：</h4>
<p>把每个点所在集合初始化为其自身。</p>
<p>通常来说，这个步骤在每次使用该数据结构时只需要执行一次，无论何种实现方式，时间复杂度均为O(N)。</p>
<h4 id="2查找">2.查找</h4>
<p>查找元素所在的集合，即根节点。</p>
<h4 id="3合并">3.合并</h4>
<p>将两个元素所在的集合合并为一个集合。<br>
通常来说，合并之前，应先判断两个元素是否属于同一集合，这可用上面的“查找”操作实现。</p>
<h1 id="代码实现">代码实现</h1>
<h4 id="1初始化-2">1.初始化</h4>
<pre><code class="language-cpp">int f[];  //定义数组f,f[i]表示节点i的父节点
for(int i=1;i&lt;=n;i++) f[i]=i;  //n为节点数
</code></pre>
<h4 id="2查找-2">2.查找</h4>
<p>首先，我们需要引入一个路径压缩的概念。</p>
<p>如果，查找中路径较长（形成一个长长的链），时间复杂度就会比较高。</p>
<h5 id="思想">思想</h5>
<p>每次查找的时候，如果路径较长，则修改信息，以便下次查找的时候速度更快。</p>
<h5 id="实现">实现</h5>
<p>1.找到根结点。</p>
<p>2.修改查找路径上的所有节点，将它们都指向根结点。</p>
<pre><code class="language-cpp">int find(int s){  //查找节点s
	if(f[s]!=s) f[s]=find(f[s]);
	return f[s];
}
</code></pre>
<h4 id="3合并-2">3.合并</h4>
<pre><code class="language-cpp">int u,v;  //需要合并的节点u和节点v
int x=find(u);
int y=find(v);  //x,y为节点u和节点v的父节点
if（x!=y) f[y]=x;  //或f[x]=y;
</code></pre>
<h3 id="相关题目">相关题目</h3>
<p><a href="https://www.luogu.org/problemnew/show/P3367">P3367 【模板】并查集</a></p>
<p><a href="https://www.luogu.org/problemnew/show/P2024">P2024 [NOI2001]食物链</a></p>
<p><a href="https://www.luogu.org/problemnew/show/P1197">P1197 [JSOI2008]星球大战</a></p>
<p><a href="https://www.luogu.org/problemnew/show/P2323">P2323 [HNOI2006]公路修建问题</a></p>
<p><a href="https://www.luogu.org/problemnew/show/P2835">P2835 刻录光盘</a></p>
<p><a href="https://www.luogu.org/problemnew/show/P3958">P3958 奶酪</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小支配集]]></title>
        <id>https://Kite-chaser.github.io/post/zui-xiao-zhi-pei-ji</id>
        <link href="https://Kite-chaser.github.io/post/zui-xiao-zhi-pei-ji">
        </link>
        <updated>2019-08-18T05:24:45.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="rt">RT</h2>
<p>1.支配集(DS,dominating set)？</p>
<p>支配集的定义如下：给定无向图G =（V , E）,其中V是点集， E是边集， 称V的一个子集S称为支配集当且仅当对于V-S中任何一个点v, 都有S中的某个点u, 使得(u, v) ∈E。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="rt">RT</h2>
<p>1.支配集(DS,dominating set)？</p>
<p>支配集的定义如下：给定无向图G =（V , E）,其中V是点集， E是边集， 称V的一个子集S称为支配集当且仅当对于V-S中任何一个点v, 都有S中的某个点u, 使得(u, v) ∈E。</p>
<!--more-->
<p>2.最小支配集(MDS)?</p>
<p>对于图G = (V, E) 来说,最小支配集指的是从 V 中取尽量少的点组成一个集合, 使得 V 中剩余的点都与取出来的点有边相连.也就是说,设 V' 是图的一个支配集,则对于图中的任意一个顶点 u ,要么属于集合 V', 要么与 V' 中的顶点相邻. 在 V' 中除去任何元素后 V' 不再是支配集, 则支配集 V' 是极小支配集.称G 的所有支配集中顶点个数最少的支配集为最小支配集,最小支配集中的顶点个数称为支配数.</p>
<p><strong>tip:以上定义有点青涩难懂，但是康康几道例题就可以明白了</strong></p>
<h2 id="slove">Slove</h2>
<h3 id="贪心策略">贪心策略</h3>
<p>首先选择一点为树根,再按照深度优先遍历得到遍历序列,按照所得序列的反向序列的顺序进行贪心,对于一个即不属于支配集也不与支配集中的点相连的点来说,如果他的父节点不属于支配集,将其父节点加入到支配集</p>
<h3 id="具体实现">具体实现</h3>
<p>1.设整型数组dfn,fa,布尔数组vis,st。dfn[i]表示dfs中出现的第i个节点，fa[i]表示dfs中节点i的父节点，vis[i]-false表示节点i不属于支配集也不与支配集中的点相连，st[i]-true表示节点i在MDS中。</p>
<p>2.建图（邻接表）。</p>
<p>3.dfs一遍树，确定dfn,fa。</p>
<p>4.dfn逆序查找，确定vis,st,同时得出MDS。</p>
<h2 id="tip">Tip：</h2>
<p>1.Code中的代码，读者需根据题目的具体情况具体改动。</p>
<p>2.听闻如此求MDS,时间复杂度为O（n）?</p>
<p>3.听闻MSD还有树状DP的做法，但是蒟蒻的我不会。</p>
<p>4.以上部分内容抠自<a href="https://baike.baidu.com/item/%E6%94%AF%E9%85%8D%E9%9B%86/3187787?fr=aladdin">度娘</a>。</p>
<p><s>5.但是度娘的代码太诡异了。</s></p>
<h2 id="code">Code</h2>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#define N 10010
using namespace std;  //标准开头
int ans;  //ans-MDS的点数
int first[N],next[N*2],len,to[N*2];
int dfn[N],cnt,fa[N];
bool vis[N],st[N];
void add(int u,int v){  //邻接表建图
	to[++len]=v;
	next[len]=first[u];
	first[u]=len;
}
void dfs(int s,int f){
	dfn[++cnt]=s;
	fa[s]=f;
	for(int i=first[s];i!=-1;i=next[i]) if(to[i]!=f) dfs(to[i],s);
}
void MDS(){
	for(int i=n;i&gt;=1;i--){
		int s=dfn[i];
		if(!vis[s]){  //不属于支配集也不与支配集中的点相连的点
			if(!st[fa[s]]){  //父节点不属于支配集
				st[fa[s]]=true;  //其父节点加入到支配集
				ans++;
			}
			vis[s]=true;
			vis[fa[s]]=true;
			vis[fa[fa[s]]]=true;
		}
	}
}
int main()
{
	// 建图  //
	dfs(1,1);
	MDS();
	return 0;
}
</code></pre>
<h2 id="相关题目">相关题目</h2>
<p><a href="https://www.luogu.org/problem/P2899">P2899 [USACO08JAN]手机网络Cell Phone Network</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Hve Notes]]></title>
        <id>https://Kite-chaser.github.io/post/hello-hve-notes</id>
        <link href="https://Kite-chaser.github.io/post/hello-hve-notes">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Hve Notes</strong> ！</p>
<p>Github: <a href="https://github.com/hve-notes/hve-notes">Hve Notes</a><br>
项目主页: <a href="http://hvenotes.fehey.com/">Hve Notes</a><br>
示例网站: <a href="http://fehey.com/">示例网站一</a> <a href="http://hve-notes.github.io">示例网站二</a></p>
<p>✍️  <strong>Hve Notes</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题</p>
<p>🌱 当然 <strong>Hve Notes</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>